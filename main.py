from LinkedList import SinglyLinkedList
from Stack import Stack, StackArr
from Trees import BinarySearchTree, AVLTree


def test():
    # print(f'Hi, {name}')
    # l = SinglyLinkedList()
    # l.add_first(1)
    # l.add_first(2)
    # print(l.size)
    # l.remove(2)
    # l.add_last(3)
    # l.add_last(12)
    # l.remove_at_position(0)
    # l.insert(7,1)
    # l.replace(20,0)
    # l.display()
    # l.insert(30, 2)
    # print('')
    # print(l.find(12))
    # print(l.get(2))
    # l.insert(21,2)
    # l.display()
    # print('')
    # l.reverse()
    # l.display()

    # t = BinarySearchTree()
    # t.add(20)
    # t.add(10)
    # t.add(5)
    # t.add(15)
    # t.add(30)
    # t.add(35)
    # t.add(25)
    # t.add(18)
    # t.add(32)
    # t.add(45)
    # t.add(8)
    # t.add(8)
    # t.add(2)
    # t.add(22)
    # t.print_tree()
    # t.invert()
    # print()
    # t.print_tree()
    # t.remove(5)
    # t.remove(25)
    # t.remove(35)
    # t.remove(25)
    # print(t.contains(50))
    # t.print_tree()
    # a = t.predecessor_alt(t.root, 0, 15)
    # # a = t.predecessor(5)
    # print(a.data)
    # t.preorder()
    # print()
    # t.inorder()
    # print()
    # t.postorder()
    # t.invert()
    # print()
    # t.print_tree()

    a = AVLTree()
    a.insert(10)
    a.insert(20)
    a.insert(5)
    print(a.root.right.parent.data)


if __name__ == '__main__':
    test()
